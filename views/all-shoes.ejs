<html lang="en"><head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ammar's shoes</title>

  <!-- font awesome cdn link  -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV" crossorigin="anonymous"></script>
  

  <!-- custom css file link  -->
  <link rel="stylesheet" href="style.css">
<style type="text/css">@font-face { font-family: Roboto; src: url("chrome-extension://mcgbeeipkmelnpldkobichboakdfaeon/css/Roboto-Regular.ttf"); }</style></head>
<body>
  <!-- header section starts  -->
 
  <header>
    <a href="#" class="logo"><img src="/images/logo.png" alt=""></i>Ammar's <span>shoes</span></a>

    <div id="menu-bar" class="fas fa-bars"></div>

    <nav class="navbar">
      <a href="/user">Home</a>
      <a href="/all-shoes">All shoes</a>
      <a href="/user#speciality">Speciality</a>
      <a href="/user#popular">Popular</a>
      <a href="/user#Man">Man</a>
      <a href="/user#Women">Women</a>
      <a href="/order#order">Order</a>
    </nav>
  </header>


<section class="popular" id="popular">
<center>
<div class="inputBoxs">
  <input class="filter-input" name="title" id="seacrh-box" type="text" placeholder="name">
</div>
</center>



<div class="box-container">
  <div class="box">
    <span class="price">$22</span>
    <img src="images/shoes6.webp" alt="">
    <h3>Nike</h3>
    <div class="stars">
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="far fa-star"></i>
    </div>
    <a href="#" class="creat">order now</a>
  </div>
  <div class="box">
    <span class="price">$26</span>
    <img src="images/shoes7.jpg" alt="">
    <h3> Adidas</h3>
    <div class="stars">
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="far fa-star"></i>
    </div>
    <a href="#" class="creat">order now</a>
  </div>
  <div class="box">
    <span class="price">$20 </span>
    <img src="images/shoes8.webp" alt="">
    <h3> Puma</h3>
    <div class="stars">
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="far fa-star"></i>
    </div>
    <a href="#" class="creat">order now</a>
  </div>
  <div class="box">
    <span class="price">$20 </span>
    <img src="images/shoes9.webp" alt="">
    <h3> Adidas</h3>
    <div class="stars">
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="far fa-star"></i>
    </div>
    <a href="#" class="creat">order now</a>
  </div>
  <div class="box">
    <span class="price">$20</span>
    <img src="images/shoes10.webp" alt="">
    <h3>Kinetix</h3>
    <div class="stars">
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="fas fa-star"></i>
      <i class="far fa-star"></i>
    </div>
    <a href="#" class="creat">order now</a>
  </div>
  
</div>

<!-- The modal -->


      </div>
      
      
    </div>
  </section>
  
  <script>
    // Select the input element and cards container
    const input = document.querySelector('input');
    const cardContainer = document.querySelector('.box-container');
  
    // Add event listener to input element
    input.addEventListener('input', filterCards);
  
    function filterCards() {
      // Get the input value
      const inputValue = input.value.toLowerCase();
  
      // Get all the cards
      const cards = cardContainer.querySelectorAll('.box');
  
      // Loop through the cards and hide the ones that don't match the input value
      cards.forEach(card => {
        const cardName = card.querySelector('h3').textContent.toLowerCase();
        if (cardName.indexOf(inputValue) !== -1) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    }
  </script>
  
  <!-- custom js file link  -->
  <script src="script.js"></script>


<script>
  function returnCommentSymbol(language = "javascript") {
    const languageObject = {
      bat: "@REM",
      c: "//",
      csharp: "//",
      cpp: "//",
      closure: ";;",
      coffeescript: "#",
      dockercompose: "#",
      css: "/*DELIMITER*/",
      "cuda-cpp": "//",
      dart: "//",
      diff: "#",
      dockerfile: "#",
      fsharp: "//",
      "git-commit": "//",
      "git-rebase": "#",
      go: "//",
      groovy: "//",
      handlebars: "{{!--DELIMITER--}}",
      hlsl: "//",
      html: "<!--DELIMITER-->",
      ignore: "#",
      ini: ";",
      java: "//",
      javascript: "//",
      javascriptreact: "//",
      json: "//",
      jsonc: "//",
      julia: "#",
      latex: "%",
      less: "//",
      lua: "--",
      makefile: "#",
      markdown: "<!--DELIMITER-->",
      "objective-c": "//",
      "objective-cpp": "//",
      perl: "#",
      perl6: "#",
      php: "<!--DELIMITER-->",
      powershell: "#",
      properties: ";",
      jade: "//-",
      python: "#",
      r: "#",
      razor: "<!--DELIMITER-->",
      restructuredtext: "..",
      ruby: "#",
      rust: "//",
      scss: "//",
      shaderlab: "//",
      shellscript: "#",
      sql: "--",
      svg: "<!--DELIMITER-->",
      swift: "//",
      tex: "%",
      typescript: "//",
      typescriptreact: "//",
      vb: "'",
      xml: "<!--DELIMITER-->",
      xsl: "<!--DELIMITER-->",
      yaml: "#"
    }
    return languageObject[language].split("DELIMITER")
  }
  var savedChPos = 0
  var returnedSuggestion = ''
  let editor, doc, cursor, line, pos
  pos = {line: 0, ch: 0}
  var suggestionsStatus = false
  var docLang = "python"
  var suggestionDisplayed = false
  var isReturningSuggestion = false
  document.addEventListener("keydown", (event) => {
  setTimeout(()=>{
    editor = event.target.closest('.CodeMirror');
    const codeEditor = editor.CodeMirror
    if (editor){
      if(!editor.classList.contains("added-tab-function")){
        editor.classList.add("added-tab-function")
        codeEditor.removeKeyMap("Tab")
        codeEditor.setOption("extraKeys", {Tab: (cm)=>{

          if(returnedSuggestion){
            acceptTab(returnedSuggestion)
          }
          else{
            cm.execCommand("defaultTab")
          }
        }})
      }
      doc = editor.CodeMirror.getDoc()
      cursor = doc.getCursor()
      line = doc.getLine(cursor.line)
      pos = {line: cursor.line, ch: line.length}

      if(cursor.ch > 0){
        savedChPos = cursor.ch
      }

      const fileLang = doc.getMode().name
      docLang = fileLang
      const commentSymbol = returnCommentSymbol(fileLang)
      if (event.key == "?"){
        var lastLine = line
        lastLine = lastLine.slice(0, savedChPos - 1)

        if(lastLine.trim().startsWith(commentSymbol[0])){
          lastLine += " "+fileLang
          lastLine = lastLine.split(commentSymbol[0])[1]
          window.postMessage({source: 'getQuery', payload: { data: lastLine } } )
          isReturningSuggestion = true
          displayGrey("\nBlackbox loading...")
        }
      }else if(event.key === "Enter" && suggestionsStatus && !isReturningSuggestion){
        var query = doc.getRange({ line: Math.max(0,cursor.line-10), ch: 0 }, { line: cursor.line, ch: line.length })
        window.postMessage({source: 'getSuggestion', payload: { data: query, language: docLang } } )
        displayGrey("Blackbox loading...")
      }else if(event.key === "ArrowRight" && returnedSuggestion){
        acceptTab(returnedSuggestion)
      }else if(event.key === "Enter" && isReturningSuggestion){
        displayGrey("\nBlackbox loading...")
      }else if(event.key === "Escape"){
        displayGrey("")
      }
    }
  }, 0)
  })

  function acceptTab(text){
  if (suggestionDisplayed){
    displayGrey("")
    doc.replaceRange(text, pos)
    returnedSuggestion = ""
    updateSuggestionStatus(false)
  }
  }
  function acceptSuggestion(text){
    displayGrey("")
    doc.replaceRange(text, pos)
    returnedSuggestion = ""
    updateSuggestionStatus(false)
  }
  function displayGrey(text){
    if(!text){
      document.querySelector(".blackbox-suggestion").remove()
      return
    }
    var el = document.querySelector(".blackbox-suggestion")
    if(!el){
      el = document.createElement('span')
      el.classList.add("blackbox-suggestion")
      el.style = 'color:grey'
      el.innerText = text
    }
    else{
      el.innerText = text
    }
    
    var lineIndex = pos.line;
    editor.getElementsByClassName('CodeMirror-line')[lineIndex].appendChild(el)
  }
  function updateSuggestionStatus(s){
    suggestionDisplayed = s
    window.postMessage({source: 'updateSuggestionStatus', status: suggestionDisplayed, suggestion: returnedSuggestion})
  }
  window.addEventListener('message', (event)=>{
  if (event.source !== window ) return
  if (event.data.source == 'return'){
    isReturningSuggestion = false
    const formattedCode = formatCode(event.data.payload.data)
    returnedSuggestion = formattedCode
    displayGrey(formattedCode)
    updateSuggestionStatus(true)
  }
  if(event.data.source == 'suggestReturn'){
    returnedSuggestion = event.data.payload.data
    displayGrey(event.data.payload.data)
    updateSuggestionStatus(true)
  }
  if(event.data.source == 'suggestionsStatus'){
    suggestionsStatus = event.data.payload.enabled
  }
  if(event.data.source == 'acceptSuggestion'){
    
    acceptSuggestion(event.data.suggestion)
  }
  })
  document.addEventListener("keyup", function(){
    returnedSuggestion = ""
    updateSuggestionStatus(false)
  })
  function formatCode(data) {
    if (Array.isArray(data)) {
      var finalCode = ""
      var pairs = []
  
      const commentSymbol = returnCommentSymbol(docLang)
      data.forEach((codeArr, idx) => {
        const code = codeArr[0]
        var desc = codeArr[1]
        const descArr = desc.split("\n")
        var finalDesc = ""
        descArr.forEach((descLine, idx) => {
          const whiteSpace = descLine.search(/\S/)
          if (commentSymbol.length < 2 || idx === 0) {
            finalDesc += insert(descLine, whiteSpace, commentSymbol[0])
          }
          if (commentSymbol.length > 1 && idx === descArr.length - 1) {
            finalDesc = finalDesc + commentSymbol[1] + "\n"
          }
        })
  
        finalCode += finalDesc + "\n\n" + code
        pairs.push(finalCode)
      })
      return "\n"+pairs.join("\n")
    }
  
    return "\n"+data
  }
  
  function insert(str, index, value) {
    return str.substr(0, index) + value + str.substr(index)
  }





</script></body></html>